@page "/excelupload"

@using ExcelFileSorter.Interfaces

@inject IJSRuntime JSRuntime
@inject IExcelExtractor ExcelExtractor

@rendermode InteractiveServer

<h3>Excel Upload</h3>

<InputFile OnChange="@LoadFiles" multiple />

@code {

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        // Handle the uploaded file
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null)
        {
            // Check if the file has a .xlsx extension
            if (file.Name.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase))
            {
                using (var stream = file.OpenReadStream())
                {
                    // Use ExcelExtractor service to extract data
                    var extractedData = await ExcelExtractor.ExtractDataFromExcel(stream);

                    // Now you have the extracted data, you can pass it to the DataCleaner service or perform additional operations
                    await JSRuntime.InvokeVoidAsync("console.log", "Valid file format. Extracted Data:", extractedData);
                }
            }
            else
            {
                // Show an error message or take appropriate action for non-.xlsx files
                // For example, you can display a message to the user
                await JSRuntime.InvokeVoidAsync("console.log", "Invalid file format. Please upload a .xlsx file.");
            }
        }
    }

    private static byte[] ReadFile(string filePath)
    {
        using var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
        return File.ReadAllBytes(filePath);
    }
}